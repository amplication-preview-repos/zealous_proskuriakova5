/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecipeService } from "../recipe.service";
import { RecipeCreateInput } from "./RecipeCreateInput";
import { Recipe } from "./Recipe";
import { RecipeFindManyArgs } from "./RecipeFindManyArgs";
import { RecipeWhereUniqueInput } from "./RecipeWhereUniqueInput";
import { RecipeUpdateInput } from "./RecipeUpdateInput";

export class RecipeControllerBase {
  constructor(protected readonly service: RecipeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Recipe })
  async createRecipe(@common.Body() data: RecipeCreateInput): Promise<Recipe> {
    return await this.service.createRecipe({
      data: data,
      select: {
        category: true,
        createdAt: true,
        id: true,
        ingredients: true,
        instructions: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Recipe] })
  @ApiNestedQuery(RecipeFindManyArgs)
  async recipes(@common.Req() request: Request): Promise<Recipe[]> {
    const args = plainToClass(RecipeFindManyArgs, request.query);
    return this.service.recipes({
      ...args,
      select: {
        category: true,
        createdAt: true,
        id: true,
        ingredients: true,
        instructions: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Recipe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recipe(
    @common.Param() params: RecipeWhereUniqueInput
  ): Promise<Recipe | null> {
    const result = await this.service.recipe({
      where: params,
      select: {
        category: true,
        createdAt: true,
        id: true,
        ingredients: true,
        instructions: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Recipe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecipe(
    @common.Param() params: RecipeWhereUniqueInput,
    @common.Body() data: RecipeUpdateInput
  ): Promise<Recipe | null> {
    try {
      return await this.service.updateRecipe({
        where: params,
        data: data,
        select: {
          category: true,
          createdAt: true,
          id: true,
          ingredients: true,
          instructions: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Recipe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecipe(
    @common.Param() params: RecipeWhereUniqueInput
  ): Promise<Recipe | null> {
    try {
      return await this.service.deleteRecipe({
        where: params,
        select: {
          category: true,
          createdAt: true,
          id: true,
          ingredients: true,
          instructions: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
