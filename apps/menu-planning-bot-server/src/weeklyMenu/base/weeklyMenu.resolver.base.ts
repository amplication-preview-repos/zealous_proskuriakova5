/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WeeklyMenu } from "./WeeklyMenu";
import { WeeklyMenuCountArgs } from "./WeeklyMenuCountArgs";
import { WeeklyMenuFindManyArgs } from "./WeeklyMenuFindManyArgs";
import { WeeklyMenuFindUniqueArgs } from "./WeeklyMenuFindUniqueArgs";
import { CreateWeeklyMenuArgs } from "./CreateWeeklyMenuArgs";
import { UpdateWeeklyMenuArgs } from "./UpdateWeeklyMenuArgs";
import { DeleteWeeklyMenuArgs } from "./DeleteWeeklyMenuArgs";
import { User } from "../../user/base/User";
import { WeeklyMenuService } from "../weeklyMenu.service";
@graphql.Resolver(() => WeeklyMenu)
export class WeeklyMenuResolverBase {
  constructor(protected readonly service: WeeklyMenuService) {}

  async _weeklyMenusMeta(
    @graphql.Args() args: WeeklyMenuCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WeeklyMenu])
  async weeklyMenus(
    @graphql.Args() args: WeeklyMenuFindManyArgs
  ): Promise<WeeklyMenu[]> {
    return this.service.weeklyMenus(args);
  }

  @graphql.Query(() => WeeklyMenu, { nullable: true })
  async weeklyMenu(
    @graphql.Args() args: WeeklyMenuFindUniqueArgs
  ): Promise<WeeklyMenu | null> {
    const result = await this.service.weeklyMenu(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WeeklyMenu)
  async createWeeklyMenu(
    @graphql.Args() args: CreateWeeklyMenuArgs
  ): Promise<WeeklyMenu> {
    return await this.service.createWeeklyMenu({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => WeeklyMenu)
  async updateWeeklyMenu(
    @graphql.Args() args: UpdateWeeklyMenuArgs
  ): Promise<WeeklyMenu | null> {
    try {
      return await this.service.updateWeeklyMenu({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WeeklyMenu)
  async deleteWeeklyMenu(
    @graphql.Args() args: DeleteWeeklyMenuArgs
  ): Promise<WeeklyMenu | null> {
    try {
      return await this.service.deleteWeeklyMenu(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: WeeklyMenu): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
